open Nonstd
open Solvuu_build.Std

let project_name = "coclobas"
let version = "0.0.2-dev"

let build_tests =
  try Sys.getenv "WITH_TESTS" = "true" with _ -> false

let findlib_deps = [
  "nonstd";
  "sosa";
  "pvem_lwt_unix";
  "cohttp.lwt";
  "trakeva_of_uri";
  "cmdliner";
  "ppx_deriving.std";
  "ppx_deriving_yojson";
  "uuidm";
  "base64";
  "odate";
]

let meta_dot_ml = "src/lib/meta.ml"

let generate_meta_data () =
  let git_last_commit () =
    try
      Some (
        Ocamlbuild_pack.My_unix.run_and_read "git rev-parse HEAD"
        |> fun x -> String.sub x 0 (String.length x - 1)
      )
    with _ -> None in
  Solvuu_build.Util.Rule.rule
    ~name:"meta-data-generation"
    ~prods:[meta_dot_ml]
    ~deps:[]
    ~insert:`bottom
    begin fun env builder ->
      let lines = List.map ~f:(sprintf "%s\n") [
          "(** Metadata Module Generated by the Build System *)";
          "";
          sprintf "let version = %S" version;
          "";
          sprintf "let git_commit = %s"
            (Option.value_map (git_last_commit ()) ~default:"None"
               ~f:(sprintf "Some %S"));
        ] in
      let open Ocamlbuild_plugin in
      Seq [
        Echo (lines, meta_dot_ml);
      ]
    end

let lib : Project.item =
  Project.lib project_name
    ~thread:()
    ~findlib_deps
    ~ml_files:(`Add [Filename.basename meta_dot_ml])
    ~dir:"src/lib"
    ~style:(`Pack project_name)

let ketrew_lib =
  (* The library is `ketrew` for Ketrew â‰¤ 3.1.0, and after the switch
     to Solvuu-build, it is `ketrew.lwt_unix`: *)
  if Findlib.installed "ketrew.lwt_unix"
  then Some "ketrew.lwt_unix"
  else
  if Findlib.installed "ketrew"
  then Some "ketrew"
  else None

let ketrew_backend : Project.item option =
  Option.map ketrew_lib ~f:(fun klib ->
      Project.lib (project_name ^ "_ketrew_backend")
        ~thread:()
        ~bin_annot:()
        ~findlib_deps:(klib :: findlib_deps)
        ~dir:"src/ketrew_backend"
        ~style:(`Pack (project_name ^ "_ketrew_backend"))
        ~internal_deps:[lib]
        ~install:(`Findlib (project_name ^ ".ketrew_backend"))
    )

let app : Project.item =
  Project.app project_name
    ~thread:()
    ~file:"src/app/main.ml"
    ~internal_deps:[lib]

let test : Project.item option =
  if build_tests
  then Some (
      Project.app (project_name ^ "-test")
        ~thread:()
        ~file:"src/test/client_server.ml"
        ~install:`No
        ~internal_deps:[lib]
    ) else None

let linked_ketrew : Project.item option =
  match ketrew_backend with
  | Some kb ->
    Some (
      Project.app (project_name ^ "-ketrew")
        ~thread:()
        ~file:"src/test/cocloketrew.ml"
        ~internal_deps:[lib; kb]
    )
  | _ -> None

let test_ketrew_workflow : Project.item option =
  match build_tests, ketrew_backend with
  | true, Some kb ->
    Some (
      Project.app (project_name ^ "-ketrew-workflow-test")
        ~thread:()
        ~install:`No
        ~file:"src/test/workflow_test.ml"
        ~internal_deps:[lib; kb]
    )
  | _, _ -> None

let ocamlinit_postfix = [
  sprintf "open %s" (String.capitalize_ascii project_name);
]

let () =
  Project.basic1 ~project_name ~version ~ocamlinit_postfix
    ~additional_rules:[generate_meta_data]
    (List.filter_opt [
        Some lib;
        Some app;
        test;
        ketrew_backend;
        linked_ketrew;
        test_ketrew_workflow;
      ])
